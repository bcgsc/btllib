# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

jobs:

- job: linux
  pool:
    vmImage: 'ubuntu-22.04'

  steps:
  - checkout: self
    submodules: recursive

  - script: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  - script: conda create --yes --quiet --name btllib_CI
    displayName: Create Anaconda environment

  - script: |
      source activate btllib_CI
      conda install --yes -c conda-forge -c bioconda libcxx compilers clang llvm clang-format=14 clang-tools boost samtools coreutils xz lrzip meson ninja cmake openmp
    displayName: Install dependencies

  - script: |
      source activate btllib_CI
      meson setup build && cd build && ninja
    displayName: 'Build the project'

  - script: |
      source activate btllib_CI
      cd build && ninja clang-format-check
    displayName: 'Run clang-format'

  - script: |
      source activate btllib_CI
      cd build && ninja clang-tidy
    displayName: 'Run clang-tidy'

  - script: |
      source activate btllib_CI
      cd build && meson test --repeat=5 --print-errorlogs
    displayName: 'Run tests'

  - script: |
      source activate btllib_CI
      cd build && ninja sanitize-undefined
      if [[ $? -ne 0 ]]; then
        cat __build-sanitize-undefined/meson-logs/testlog.txt
        exit 1
      fi
    displayName: 'Sanitize undefined'

  - script: |
      source activate btllib_CI
      set -o errexit -o pipefail
      samtools --version 
      echo "samtools"
      ./compile
      cd build && ninja test-wrappers
    displayName: 'Test wrappers'

- job: macos
  pool:
    vmImage: 'macOS-12'

  steps:
  - checkout: self
    persistCredentials: true
    submodules: recursive
  - script: |
      echo "##vso[task.prependpath]$CONDA/bin"
      conda update -n base -y -c defaults conda
    displayName: Add conda to PATH
  - script: conda create --yes --quiet --name btllib_CI
    displayName: Create Anaconda environment

  - script: |
      source activate btllib_CI
      conda install --yes -c conda-forge -c bioconda libcxx compilers llvm clang-format=14 clang-tools boost 'samtools>=1.14' coreutils xz lrzip meson ninja cmake openmp
    displayName: 'Install required software'

  - script: |
      source activate btllib_CI
      meson setup build && cd build && ninja
    displayName: 'Build the project'

  - script: |
      source activate btllib_CI
      cd build && ninja clang-format-check
    displayName: 'Run clang-format'

  - script: source activate btllib_CI && cd build && ninja clang-tidy
    displayName: 'Run clang-tidy'

  - script: |
      source activate btllib_CI && cd build && meson test --repeat=5 --print-errorlogs
    displayName: 'Run tests'

  - script: |
      source activate btllib_CI && cd build && ninja sanitize-undefined
      if [[ $? -ne 0 ]]; then
        cat __build-sanitize-undefined/meson-logs/testlog.txt
        exit 1
      fi
    displayName: 'Sanitize undefined'

  - script: |
      source activate btllib_CI
      set -o errexit -o pipefail
      samtools --version 
      echo "samtools"
      ./compile
      cd build && ninja test-wrappers
    displayName: 'Test wrappers'
