# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

jobs:

- job: linux
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - checkout: self
    submodules: recursive

  - script: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  - script: conda create --yes --quiet --name btllib_CI
    displayName: Create Anaconda environment

  - script: |
      source activate btllib_CI
      conda install --yes -c conda-forge mamba
      mamba install --yes -c conda-forge -c bioconda libcxx compilers clang llvm clang-format=18 clang-tools boost samtools coreutils xz lrzip meson ninja cmake openmp
      pip install gcovr
    displayName: Install dependencies
  
  - script: |
      source activate btllib_CI
      meson setup build && cd build && ninja
    displayName: 'Build the project'

  - script: |
      source activate btllib_CI
      set -o errexit -o pipefail
      ./compile
      cd examples
      g++ nthash_spacedseeds.cpp -std=c++17 -I../install/include -L../install/lib -lbtllib && ./a.out
    displayName: 'Compile example'

  - script: |
      source activate btllib_CI
      cd build && ninja clang-format-check
    displayName: 'Run clang-format'

  - script: |
      source activate btllib_CI
      cd build && meson test --repeat=5 --print-errorlogs
    displayName: 'Run tests'

  - script: |
      source activate btllib_CI
      cd build && ninja sanitize-undefined
      if [[ $? -ne 0 ]]; then
        cat __build-sanitize-undefined/meson-logs/testlog.txt
        exit 1
      fi
    displayName: 'Sanitize undefined'

  - script: |
      source activate btllib_CI
      set -o errexit -o pipefail
      ./compile
      cd build && ninja test-wrappers
    displayName: 'Test wrappers'

  - script: |
      source activate btllib_CI
      cd build && ninja test && ninja code-coverage
    displayName: 'Run code coverage tests'

- job: macos
  pool:
    vmImage: 'macOS-latest'

  steps:
  - checkout: self
    persistCredentials: true
    submodules: recursive

  - script: |
      mkdir -p ~/miniforge3
      curl -L https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-x86_64.sh  -o ~/miniforge3/miniforge.sh
      bash ~/miniforge3/miniforge.sh -b -u -p ~/miniforge3
      rm -rf  ~/miniforge3/miniforge.sh
      ~/miniforge3/bin/conda init bash
      ~/miniforge3/bin/conda init zsh
      export CONDA=$(realpath ~/miniforge3/bin)
      echo "##vso[task.prependpath]$CONDA"
    displayName: Install conda

  - script: conda create --yes --quiet --name btllib_CI
    displayName: Create Anaconda environment

  - script: |
      source activate btllib_CI      
      mamba install --yes -c conda-forge -c bioconda libcxx compilers llvm clang-format clang-tools boost 'samtools>=1.14' coreutils xz lrzip meson ninja cmake openmp gcovr
    displayName: 'Install required software'

  - script: |
      source activate btllib_CI
      export CXXFLAGS="$CXXFLAGS -Wno-error=unused-but-set-variable"
      meson setup build && cd build && ninja
    displayName: 'Build the project'
  
  - script: |
      source activate btllib_CI
      set -o errexit -o pipefail
      ./compile
      cd examples
      clang++ nthash_spacedseeds.cpp -std=c++17 -I../install/include -L../install/lib -lbtllib && ./a.out
    displayName: 'Compile example'

  - script: |
      source activate btllib_CI && cd build && meson test --repeat=5 --print-errorlogs
    displayName: 'Run tests'
    
  - script: |
      source activate btllib_CI && cd build
      export CXXFLAGS="$CXXFLAGS -Wno-error=unused-but-set-variable"
      ninja sanitize-undefined
      if [[ $? -ne 0 ]]; then
        cat __build-sanitize-undefined/meson-logs/testlog.txt
        exit 1
      fi
    displayName: 'Sanitize undefined'

  - script: |
      source activate btllib_CI
      set -o errexit -o pipefail
      ./compile
      cd build && ninja test-wrappers
    displayName: 'Test wrappers'
