project('btllib', 'cpp',
        version : '1.4.9',
        license : 'GPL3',
        default_options : [ 'cpp_std=c++11', 'warning_level=3', 'werror=true' ],
        meson_version : '>= 0.60.0')

# Configuration
# ===========================================================

conf = configuration_data()
conf.set('PROJECT_VERSION', meson.project_version(), description : 'btllib version. Useful to append to the help prompt of recipes.')
configure_file(input : 'include/btllib/config.hpp.in', output : 'config.hpp', configuration : conf)

# Modules
# ===========================================================

fs = import('fs')
cmake = import('cmake')

# Compiler and global flags
# ===========================================================

compiler = meson.get_compiler('cpp')
compiler_id = compiler.get_id()
compiler_version = compiler.version()

if compiler_id == 'gcc' and compiler_version.version_compare('<6.0.0')
  error('GCC ' + compiler_version + ' is unsupported.')
endif
if compiler_id == 'clang' and compiler_version.version_compare('<5.0.0')
  error('Clang ' + compiler_version + ' is unsupported.')
endif

global_args = []
global_link_args = [ '-ldl' ]

if compiler_id == 'clang'
  global_link_args += [ '-lstdc++', '-lm' ]
endif

add_global_arguments(global_args, language : 'cpp')
add_global_link_arguments(global_link_args, language : 'cpp')

# Build dependencies and subprojects
# ===========================================================

threads_dep = dependency('threads')
openmp_dep = dependency('openmp', required : false)

cmake_options = cmake.subproject_options()
cmake_options.set_override_option('werror', 'false')
cmake_options.set_install(false)

deps = [ threads_dep, openmp_dep ]

# Run time dependencies
# ===========================================================

samtools = find_program('samtools', required : false)
gzip = find_program('gzip', required : false)
xz = find_program('xz', required : false)
bzip2 = find_program('bzip2', required : false)
tar = find_program('tar', required : false)

# Custom run commands
# ===========================================================

rootpath = meson.project_source_root()

# The library
# ===========================================================

btllib_include = [ include_directories('include'), include_directories('.') ]
btllib_sources = run_command('scripts/get-files', 'src').stdout().strip().split()

btllib_lib = static_library('btllib',
                           btllib_sources,
                           include_directories : btllib_include,
                           dependencies : deps,
                           install : true,
                           install_dir : 'lib')

btllib_dep = declare_dependency(
  link_with : btllib_lib,
  include_directories : btllib_include
)

subdir('include')
subdir('tests')
